{"ast":null,"code":"import { createStore } from \"redux\";\nconst initialState = {\n  loggedIn: false,\n  userDetails: {},\n  cartItems: []\n}; // const storeReducer = (state, action) => {\n//   //LOGIN\n//   if (action.type === \"checkLoginStatus\") {\n//     return {\n//       loggedIn: state.loggedIn,\n//     };\n//   }\n//   if (action.type === \"setLogin\") {\n//     return {\n//       loggedIn: (state.loggedIn = true),\n//     };\n//   }\n//   if (action.type === \"clearLogin\") {\n//     return {\n//       loggedIn: (state.loggedIn = false),\n//     };\n//   }\n//   //USER\n//   if (action.type === \"checkUserDetails\") {\n//     return {\n//       userDetails: state.userDetails,\n//     };\n//   }\n//   if (action.type === \"addUserDetails\") {\n//     return {\n//       userDetails: (state.userDetails = action.userDetails),\n//     };\n//   }\n//   if (action.type === \"clearUserDetails\") {\n//     return {\n//       userDetails: (state.userDetails = {}),\n//     };\n//   }\n//   //CART\n//   if (action.type === \"getCartItems\") {\n//     return {\n//       cartItems: state.cartItems,\n//     };\n//   }\n//   if (action.type === \"addCartItems\") {\n//     let currentCart = state.cartItems;\n//     console.log(\"currentCart: \", currentCart);\n//     if (currentCart === undefined) {\n//       currentCart.push(action.item);\n//     } else {\n//       const found = currentCart.some(\n//         (el) => el.productName === action.item.productName\n//       );\n//       if (!found) currentCart.push(action.item);\n//       else {\n//         currentCart.map((item) => {\n//           if (item.productName === action.item.productName) {\n//             item.quantity = item.quantity + 1;\n//           }\n//         });\n//       }\n//     }\n//     return {\n//       cartItems: (state.cartItems = currentCart),\n//     };\n//   }\n//   if (action.type === \"clearCartItems\") {\n//     return {\n//       cartItems: (state.cartItems = []),\n//     };\n//   }\n//   return state;\n// };\n\nconst loginReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    loggedIn: false\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === \"checkLoginStatus\") {\n    return {\n      loggedIn: state.loggedIn\n    };\n  }\n\n  if (action.type === \"setLogin\") {\n    return {\n      loggedIn: state.loggedIn = true\n    };\n  }\n\n  if (action.type === \"clearLogin\") {\n    return {\n      loggedIn: state.loggedIn = false\n    };\n  }\n\n  return state;\n};\n\nconst userReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    userDetails: {}\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === \"checkUserDetails\") {\n    return {\n      userDetails: state.userDetails\n    };\n  }\n\n  if (action.type === \"addUserDetails\") {\n    return {\n      userDetails: state.userDetails = action.userDetails\n    };\n  }\n\n  if (action.type === \"clearUserDetails\") {\n    return {\n      userDetails: state.userDetails = {}\n    };\n  }\n\n  return state;\n}; // const cartReducer = (state = { cartItems: [] }, action) => {\n//   if (action.type === \"getCartItems\") {\n//     return {\n//       cartItems: state.cartItems,\n//     };\n//   }\n//   if (action.type === \"addCartItems\") {\n//     return {\n//       cartItems: (state.cartItems = action.item),\n//     };\n//   }\n//   if (action.type === \"clearCartItems\") {\n//     return {\n//       cartItems: (state.cartItems = []),\n//     };\n//   }\n//   return state;\n// };\n\n\nconst store = createStore(loginReducer, userReducer); // const store = createStore(storeReducer, initialState);\n\nexport default store;","map":{"version":3,"sources":["C:/Siddharth/Test Codes/react/capstone/ecommerce_main/src/store/index.js"],"names":["createStore","initialState","loggedIn","userDetails","cartItems","loginReducer","state","action","type","userReducer","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,QAAQ,EAAE,KAAZ;AAAmBC,EAAAA,WAAW,EAAE,EAAhC;AAAoCC,EAAAA,SAAS,EAAE;AAA/C,CAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,YAAyC;AAAA,MAAxCC,KAAwC,uEAAhC;AAAEJ,IAAAA,QAAQ,EAAE;AAAZ,GAAgC;AAAA,MAAXK,MAAW;;AAC5D,MAAIA,MAAM,CAACC,IAAP,KAAgB,kBAApB,EAAwC;AACtC,WAAO;AACLN,MAAAA,QAAQ,EAAEI,KAAK,CAACJ;AADX,KAAP;AAGD;;AACD,MAAIK,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;AAC9B,WAAO;AACLN,MAAAA,QAAQ,EAAGI,KAAK,CAACJ,QAAN,GAAiB;AADvB,KAAP;AAGD;;AACD,MAAIK,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;AAChC,WAAO;AACLN,MAAAA,QAAQ,EAAGI,KAAK,CAACJ,QAAN,GAAiB;AADvB,KAAP;AAGD;;AACD,SAAOI,KAAP;AACD,CAjBD;;AAkBA,MAAMG,WAAW,GAAG,YAAyC;AAAA,MAAxCH,KAAwC,uEAAhC;AAAEH,IAAAA,WAAW,EAAE;AAAf,GAAgC;AAAA,MAAXI,MAAW;;AAC3D,MAAIA,MAAM,CAACC,IAAP,KAAgB,kBAApB,EAAwC;AACtC,WAAO;AACLL,MAAAA,WAAW,EAAEG,KAAK,CAACH;AADd,KAAP;AAGD;;AACD,MAAII,MAAM,CAACC,IAAP,KAAgB,gBAApB,EAAsC;AACpC,WAAO;AACLL,MAAAA,WAAW,EAAGG,KAAK,CAACH,WAAN,GAAoBI,MAAM,CAACJ;AADpC,KAAP;AAGD;;AACD,MAAII,MAAM,CAACC,IAAP,KAAgB,kBAApB,EAAwC;AACtC,WAAO;AACLL,MAAAA,WAAW,EAAGG,KAAK,CAACH,WAAN,GAAoB;AAD7B,KAAP;AAGD;;AACD,SAAOG,KAAP;AACD,CAjBD,C,CAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMI,KAAK,GAAGV,WAAW,CAACK,YAAD,EAAeI,WAAf,CAAzB,C,CACA;;AAEA,eAAeC,KAAf","sourcesContent":["import { createStore } from \"redux\";\r\n\r\nconst initialState = { loggedIn: false, userDetails: {}, cartItems: [] };\r\n\r\n// const storeReducer = (state, action) => {\r\n//   //LOGIN\r\n//   if (action.type === \"checkLoginStatus\") {\r\n//     return {\r\n//       loggedIn: state.loggedIn,\r\n//     };\r\n//   }\r\n//   if (action.type === \"setLogin\") {\r\n//     return {\r\n//       loggedIn: (state.loggedIn = true),\r\n//     };\r\n//   }\r\n//   if (action.type === \"clearLogin\") {\r\n//     return {\r\n//       loggedIn: (state.loggedIn = false),\r\n//     };\r\n//   }\r\n//   //USER\r\n//   if (action.type === \"checkUserDetails\") {\r\n//     return {\r\n//       userDetails: state.userDetails,\r\n//     };\r\n//   }\r\n//   if (action.type === \"addUserDetails\") {\r\n//     return {\r\n//       userDetails: (state.userDetails = action.userDetails),\r\n//     };\r\n//   }\r\n//   if (action.type === \"clearUserDetails\") {\r\n//     return {\r\n//       userDetails: (state.userDetails = {}),\r\n//     };\r\n//   }\r\n//   //CART\r\n//   if (action.type === \"getCartItems\") {\r\n//     return {\r\n//       cartItems: state.cartItems,\r\n//     };\r\n//   }\r\n//   if (action.type === \"addCartItems\") {\r\n//     let currentCart = state.cartItems;\r\n//     console.log(\"currentCart: \", currentCart);\r\n//     if (currentCart === undefined) {\r\n//       currentCart.push(action.item);\r\n//     } else {\r\n//       const found = currentCart.some(\r\n//         (el) => el.productName === action.item.productName\r\n//       );\r\n//       if (!found) currentCart.push(action.item);\r\n//       else {\r\n//         currentCart.map((item) => {\r\n//           if (item.productName === action.item.productName) {\r\n//             item.quantity = item.quantity + 1;\r\n//           }\r\n//         });\r\n//       }\r\n//     }\r\n//     return {\r\n//       cartItems: (state.cartItems = currentCart),\r\n//     };\r\n//   }\r\n//   if (action.type === \"clearCartItems\") {\r\n//     return {\r\n//       cartItems: (state.cartItems = []),\r\n//     };\r\n//   }\r\n//   return state;\r\n// };\r\nconst loginReducer = (state = { loggedIn: false }, action) => {\r\n  if (action.type === \"checkLoginStatus\") {\r\n    return {\r\n      loggedIn: state.loggedIn,\r\n    };\r\n  }\r\n  if (action.type === \"setLogin\") {\r\n    return {\r\n      loggedIn: (state.loggedIn = true),\r\n    };\r\n  }\r\n  if (action.type === \"clearLogin\") {\r\n    return {\r\n      loggedIn: (state.loggedIn = false),\r\n    };\r\n  }\r\n  return state;\r\n};\r\nconst userReducer = (state = { userDetails: {} }, action) => {\r\n  if (action.type === \"checkUserDetails\") {\r\n    return {\r\n      userDetails: state.userDetails,\r\n    };\r\n  }\r\n  if (action.type === \"addUserDetails\") {\r\n    return {\r\n      userDetails: (state.userDetails = action.userDetails),\r\n    };\r\n  }\r\n  if (action.type === \"clearUserDetails\") {\r\n    return {\r\n      userDetails: (state.userDetails = {}),\r\n    };\r\n  }\r\n  return state;\r\n};\r\n// const cartReducer = (state = { cartItems: [] }, action) => {\r\n//   if (action.type === \"getCartItems\") {\r\n//     return {\r\n//       cartItems: state.cartItems,\r\n//     };\r\n//   }\r\n//   if (action.type === \"addCartItems\") {\r\n//     return {\r\n//       cartItems: (state.cartItems = action.item),\r\n//     };\r\n//   }\r\n//   if (action.type === \"clearCartItems\") {\r\n//     return {\r\n//       cartItems: (state.cartItems = []),\r\n//     };\r\n//   }\r\n//   return state;\r\n// };\r\n\r\nconst store = createStore(loginReducer, userReducer);\r\n// const store = createStore(storeReducer, initialState);\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}