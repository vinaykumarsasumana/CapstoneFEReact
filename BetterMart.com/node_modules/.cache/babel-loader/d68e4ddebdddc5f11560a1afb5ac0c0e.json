{"ast":null,"code":"import { createStore } from \"redux\";\nconst initialState = {\n  loggedIn: false,\n  userDetails: {},\n  cartItems: []\n};\n\nconst storeReducer = (state, action) => {\n  //LOGIN\n  if (action.type === \"checkLoginStatus\") {\n    return {\n      loggedIn: state.loggedIn\n    };\n  }\n\n  if (action.type === \"setLogin\") {\n    return {\n      loggedIn: state.loggedIn = true\n    };\n  }\n\n  if (action.type === \"clearLogin\") {\n    return {\n      loggedIn: state.loggedIn = false\n    };\n  } //USER\n\n\n  if (action.type === \"checkUserDetails\") {\n    return {\n      userDetails: state.userDetails\n    };\n  }\n\n  if (action.type === \"addUserDetails\") {\n    return {\n      userDetails: state.userDetails = action.userDetails\n    };\n  }\n\n  if (action.type === \"clearUserDetails\") {\n    return {\n      userDetails: state.userDetails = {}\n    };\n  } //CART\n\n\n  if (action.type === \"getCartItems\") {\n    return {\n      cartItems: state.cartItems\n    };\n  }\n\n  if (action.type === \"addCartItems\") {\n    let currentCart = state.cartItems;\n    console.log(\"currentCart: \", currentCart);\n\n    if (currentCart === undefined) {\n      currentCart.push(action.item);\n    } else {\n      const found = currentCart.some(el => el.productName === action.item.productName);\n      if (!found) currentCart.push(action.item);else {\n        currentCart.map(item => {\n          if (item.productName === action.item.productName) {\n            item.quantity = item.quantity + 1;\n          }\n        });\n      }\n    }\n\n    return {\n      cartItems: state.cartItems = currentCart\n    };\n  }\n\n  if (action.type === \"clearCartItems\") {\n    return {\n      cartItems: state.cartItems = []\n    };\n  }\n\n  return state;\n};\n\nconst loginReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    loggedIn: false\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === \"checkLoginStatus\") {\n    return {\n      loggedIn: state.loggedIn\n    };\n  }\n\n  if (action.type === \"setLogin\") {\n    return {\n      loggedIn: state.loggedIn = true\n    };\n  }\n\n  if (action.type === \"clearLogin\") {\n    return {\n      loggedIn: state.loggedIn = false\n    };\n  }\n\n  return state;\n};\n\nconst userReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    userDetails: {}\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === \"checkUserDetails\") {\n    return {\n      userDetails: state.userDetails\n    };\n  }\n\n  if (action.type === \"addUserDetails\") {\n    return {\n      userDetails: state.userDetails = action.userDetails\n    };\n  }\n\n  if (action.type === \"clearUserDetails\") {\n    return {\n      userDetails: state.userDetails = {}\n    };\n  }\n\n  return state;\n}; // const cartReducer = (state = { cartItems: [] }, action) => {\n//   if (action.type === \"getCartItems\") {\n//     return {\n//       cartItems: state.cartItems,\n//     };\n//   }\n//   if (action.type === \"addCartItems\") {\n//     return {\n//       cartItems: (state.cartItems = action.item),\n//     };\n//   }\n//   if (action.type === \"clearCartItems\") {\n//     return {\n//       cartItems: (state.cartItems = []),\n//     };\n//   }\n//   return state;\n// };\n\n\nconst store = createStore(loginReducer, userReducer); // const store = createStore(storeReducer, initialState);\n\nexport default store;","map":{"version":3,"sources":["C:/Siddharth/Test Codes/react/capstone/ecommerce_main/src/store/index.js"],"names":["createStore","initialState","loggedIn","userDetails","cartItems","storeReducer","state","action","type","currentCart","console","log","undefined","push","item","found","some","el","productName","map","quantity","loginReducer","userReducer","store"],"mappings":"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","sourcesContent":["import { createStore } from \"redux\";\r\n\r\nconst initialState = { loggedIn: false, userDetails: {}, cartItems: [] };\r\n\r\nconst storeReducer = (state, action) => {\r\n  //LOGIN\r\n  if (action.type === \"checkLoginStatus\") {\r\n    return {\r\n      loggedIn: state.loggedIn,\r\n    };\r\n  }\r\n  if (action.type === \"setLogin\") {\r\n    return {\r\n      loggedIn: (state.loggedIn = true),\r\n    };\r\n  }\r\n  if (action.type === \"clearLogin\") {\r\n    return {\r\n      loggedIn: (state.loggedIn = false),\r\n    };\r\n  }\r\n  //USER\r\n  if (action.type === \"checkUserDetails\") {\r\n    return {\r\n      userDetails: state.userDetails,\r\n    };\r\n  }\r\n  if (action.type === \"addUserDetails\") {\r\n    return {\r\n      userDetails: (state.userDetails = action.userDetails),\r\n    };\r\n  }\r\n  if (action.type === \"clearUserDetails\") {\r\n    return {\r\n      userDetails: (state.userDetails = {}),\r\n    };\r\n  }\r\n  //CART\r\n  if (action.type === \"getCartItems\") {\r\n    return {\r\n      cartItems: state.cartItems,\r\n    };\r\n  }\r\n  if (action.type === \"addCartItems\") {\r\n    let currentCart = state.cartItems;\r\n    console.log(\"currentCart: \", currentCart);\r\n    if (currentCart === undefined) {\r\n      currentCart.push(action.item);\r\n    } else {\r\n      const found = currentCart.some(\r\n        (el) => el.productName === action.item.productName\r\n      );\r\n      if (!found) currentCart.push(action.item);\r\n      else {\r\n        currentCart.map((item) => {\r\n          if (item.productName === action.item.productName) {\r\n            item.quantity = item.quantity + 1;\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return {\r\n      cartItems: (state.cartItems = currentCart),\r\n    };\r\n  }\r\n  if (action.type === \"clearCartItems\") {\r\n    return {\r\n      cartItems: (state.cartItems = []),\r\n    };\r\n  }\r\n  return state;\r\n};\r\nconst loginReducer = (state = { loggedIn: false }, action) => {\r\n  if (action.type === \"checkLoginStatus\") {\r\n    return {\r\n      loggedIn: state.loggedIn,\r\n    };\r\n  }\r\n  if (action.type === \"setLogin\") {\r\n    return {\r\n      loggedIn: (state.loggedIn = true),\r\n    };\r\n  }\r\n  if (action.type === \"clearLogin\") {\r\n    return {\r\n      loggedIn: (state.loggedIn = false),\r\n    };\r\n  }\r\n  return state;\r\n};\r\nconst userReducer = (state = { userDetails: {} }, action) => {\r\n  if (action.type === \"checkUserDetails\") {\r\n    return {\r\n      userDetails: state.userDetails,\r\n    };\r\n  }\r\n  if (action.type === \"addUserDetails\") {\r\n    return {\r\n      userDetails: (state.userDetails = action.userDetails),\r\n    };\r\n  }\r\n  if (action.type === \"clearUserDetails\") {\r\n    return {\r\n      userDetails: (state.userDetails = {}),\r\n    };\r\n  }\r\n  return state;\r\n};\r\n// const cartReducer = (state = { cartItems: [] }, action) => {\r\n//   if (action.type === \"getCartItems\") {\r\n//     return {\r\n//       cartItems: state.cartItems,\r\n//     };\r\n//   }\r\n//   if (action.type === \"addCartItems\") {\r\n//     return {\r\n//       cartItems: (state.cartItems = action.item),\r\n//     };\r\n//   }\r\n//   if (action.type === \"clearCartItems\") {\r\n//     return {\r\n//       cartItems: (state.cartItems = []),\r\n//     };\r\n//   }\r\n//   return state;\r\n// };\r\n\r\nconst store = createStore(loginReducer, userReducer);\r\n// const store = createStore(storeReducer, initialState);\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}